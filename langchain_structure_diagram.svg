<svg viewBox="0 0 1400 900" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <linearGradient id="grad1" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:#3B82F6;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#1D4ED8;stop-opacity:1" />
    </linearGradient>
    <linearGradient id="grad2" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:#10B981;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#059669;stop-opacity:1" />
    </linearGradient>
    <linearGradient id="grad3" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:#F59E0B;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#D97706;stop-opacity:1" />
    </linearGradient>
    <linearGradient id="grad4" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:#EF4444;stop-opacity:1" />
      <stop offset="100%" style="stop-color:#DC2626;stop-opacity:1" />
    </linearGradient>
    <filter id="shadow" x="-20%" y="-20%" width="140%" height="140%">
      <feDropShadow dx="3" dy="3" stdDeviation="2" flood-color="#000" flood-opacity="0.3"/>
    </filter>
    <marker id="arrowhead" markerWidth="10" markerHeight="7" refX="9" refY="3.5" orient="auto">
      <polygon points="0 0, 10 3.5, 0 7" fill="#6B7280"/>
    </marker>
  </defs>
  
  <!-- Background -->
  <rect width="1400" height="900" fill="#f9fafb"/>
  
  <!-- Title -->
  <text x="700" y="40" text-anchor="middle" font-family="Arial, sans-serif" font-size="28" font-weight="bold" fill="#111827">
    LangChain 구조도 - 체인 기반 AI 애플리케이션
  </text>
  
  <!-- Subtitle -->
  <text x="700" y="70" text-anchor="middle" font-family="Arial, sans-serif" font-size="16" fill="#6B7280">
    순차적 모듈 조합으로 복잡한 AI 워크플로우 구축
  </text>
  
  <!-- File 01: LLM & Chat Models -->
  <g>
    <rect x="50" y="100" width="300" height="350" rx="15" fill="url(#grad1)" opacity="0.1" stroke="#3B82F6" stroke-width="2"/>
    <text x="200" y="130" text-anchor="middle" font-family="Arial, sans-serif" font-size="18" font-weight="bold" fill="#3B82F6">
      01. Models (LLM &amp; Chat)
    </text>
    
    <!-- LLM -->
    <rect x="70" y="150" width="260" height="80" rx="8" fill="#fff" stroke="#e5e7eb" stroke-width="1" filter="url(#shadow)"/>
    <text x="85" y="175" font-family="Arial, sans-serif" font-size="14" font-weight="bold" fill="#1f2937">🤖 OpenAI LLM</text>
    <text x="85" y="195" font-family="Arial, sans-serif" font-size="11" fill="#6b7280">• 단순 텍스트 완성</text>
    <text x="85" y="210" font-family="Arial, sans-serif" font-size="11" fill="#6b7280">• model.invoke("안녕하세요")</text>
    
    <!-- Chat Model -->
    <rect x="70" y="250" width="260" height="100" rx="8" fill="#fff" stroke="#e5e7eb" stroke-width="1" filter="url(#shadow)"/>
    <text x="85" y="275" font-family="Arial, sans-serif" font-size="14" font-weight="bold" fill="#1f2937">💬 ChatOpenAI</text>
    <text x="85" y="295" font-family="Arial, sans-serif" font-size="11" fill="#6b7280">• 대화형 메시지 처리</text>
    <text x="85" y="310" font-family="Arial, sans-serif" font-size="11" fill="#6b7280">• SystemMessage, HumanMessage</text>
    <text x="85" y="325" font-family="Arial, sans-serif" font-size="11" fill="#6b7280">• 스트리밍 지원</text>
    
    <!-- Local Setup -->
    <rect x="70" y="370" width="260" height="60" rx="8" fill="#fff" stroke="#e5e7eb" stroke-width="1" filter="url(#shadow)"/>
    <text x="85" y="395" font-family="Arial, sans-serif" font-size="14" font-weight="bold" fill="#1f2937">🏠 로컬 모델 설정</text>
    <text x="85" y="415" font-family="Arial, sans-serif" font-size="11" fill="#6b7280">• base_url="localhost:1234"</text>
  </g>
  
  <!-- File 02: Prompts -->
  <g>
    <rect x="380" y="100" width="300" height="350" rx="15" fill="url(#grad2)" opacity="0.1" stroke="#10B981" stroke-width="2"/>
    <text x="530" y="130" text-anchor="middle" font-family="Arial, sans-serif" font-size="18" font-weight="bold" fill="#10B981">
      02. Prompts (템플릿)
    </text>
    
    <!-- PromptTemplate -->
    <rect x="400" y="150" width="260" height="70" rx="8" fill="#fff" stroke="#e5e7eb" stroke-width="1" filter="url(#shadow)"/>
    <text x="415" y="175" font-family="Arial, sans-serif" font-size="14" font-weight="bold" fill="#1f2937">📝 PromptTemplate</text>
    <text x="415" y="195" font-family="Arial, sans-serif" font-size="11" fill="#6b7280">• 단순 문자열 템플릿</text>
    <text x="415" y="210" font-family="Arial, sans-serif" font-size="11" fill="#6b7280">• from_template("{dish}")</text>
    
    <!-- ChatPromptTemplate -->
    <rect x="400" y="240" width="260" height="80" rx="8" fill="#fff" stroke="#e5e7eb" stroke-width="1" filter="url(#shadow)"/>
    <text x="415" y="265" font-family="Arial, sans-serif" font-size="14" font-weight="bold" fill="#1f2937">💭 ChatPromptTemplate</text>
    <text x="415" y="285" font-family="Arial, sans-serif" font-size="11" fill="#6b7280">• 역할별 메시지 구성</text>
    <text x="415" y="300" font-family="Arial, sans-serif" font-size="11" fill="#6b7280">• system, human, ai 역할</text>
    
    <!-- MessagesPlaceholder -->
    <rect x="400" y="340" width="260" height="90" rx="8" fill="#fff" stroke="#e5e7eb" stroke-width="1" filter="url(#shadow)"/>
    <text x="415" y="365" font-family="Arial, sans-serif" font-size="14" font-weight="bold" fill="#1f2937">🔄 MessagesPlaceholder</text>
    <text x="415" y="385" font-family="Arial, sans-serif" font-size="11" fill="#6b7280">• 대화 히스토리 삽입</text>
    <text x="415" y="400" font-family="Arial, sans-serif" font-size="11" fill="#6b7280">• chat_history 관리</text>
    <text x="415" y="415" font-family="Arial, sans-serif" font-size="11" fill="#6b7280">• optional=True</text>
  </g>
  
  <!-- File 03: Output Parsers -->
  <g>
    <rect x="710" y="100" width="300" height="350" rx="15" fill="url(#grad3)" opacity="0.1" stroke="#F59E0B" stroke-width="2"/>
    <text x="860" y="130" text-anchor="middle" font-family="Arial, sans-serif" font-size="18" font-weight="bold" fill="#F59E0B">
      03. Output Parsers
    </text>
    
    <!-- Pydantic Parser -->
    <rect x="730" y="150" width="260" height="120" rx="8" fill="#fff" stroke="#e5e7eb" stroke-width="1" filter="url(#shadow)"/>
    <text x="745" y="175" font-family="Arial, sans-serif" font-size="14" font-weight="bold" fill="#1f2937">🏗️ PydanticOutputParser</text>
    <text x="745" y="195" font-family="Arial, sans-serif" font-size="11" fill="#6b7280">• 구조화된 데이터 파싱</text>
    <text x="745" y="210" font-family="Arial, sans-serif" font-size="11" fill="#6b7280">• Recipe(ingredients, steps)</text>
    <text x="745" y="225" font-family="Arial, sans-serif" font-size="11" fill="#6b7280">• Field descriptions</text>
    <text x="745" y="240" font-family="Arial, sans-serif" font-size="11" fill="#6b7280">• format_instructions</text>
    <text x="745" y="255" font-family="Arial, sans-serif" font-size="11" fill="#6b7280">• 자동 JSON 스키마 생성</text>
    
    <!-- String Parser -->
    <rect x="730" y="290" width="260" height="80" rx="8" fill="#fff" stroke="#e5e7eb" stroke-width="1" filter="url(#shadow)"/>
    <text x="745" y="315" font-family="Arial, sans-serif" font-size="14" font-weight="bold" fill="#1f2937">📄 StrOutputParser</text>
    <text x="745" y="335" font-family="Arial, sans-serif" font-size="11" fill="#6b7280">• AIMessage → 문자열 변환</text>
    <text x="745" y="350" font-family="Arial, sans-serif" font-size="11" fill="#6b7280">• 단순 텍스트 추출</text>
    
    <!-- Format Instructions -->
    <rect x="730" y="390" width="260" height="50" rx="8" fill="#fff" stroke="#e5e7eb" stroke-width="1" filter="url(#shadow)"/>
    <text x="745" y="415" font-family="Arial, sans-serif" font-size="14" font-weight="bold" fill="#1f2937">📋 Format Instructions</text>
    <text x="745" y="430" font-family="Arial, sans-serif" font-size="11" fill="#6b7280">• AI에게 출력 형식 안내</text>
  </g>
  
  <!-- File 04: Simple Parser Example -->
  <g>
    <rect x="1040" y="100" width="300" height="350" rx="15" fill="url(#grad4)" opacity="0.1" stroke="#EF4444" stroke-width="2"/>
    <text x="1190" y="130" text-anchor="middle" font-family="Arial, sans-serif" font-size="18" font-weight="bold" fill="#EF4444">
      04. Parser 실습
    </text>
    
    <!-- Simple Example -->
    <rect x="1060" y="150" width="260" height="100" rx="8" fill="#fff" stroke="#e5e7eb" stroke-width="1" filter="url(#shadow)"/>
    <text x="1075" y="175" font-family="Arial, sans-serif" font-size="14" font-weight="bold" fill="#1f2937">🔧 기본 사용법</text>
    <text x="1075" y="195" font-family="Arial, sans-serif" font-size="11" fill="#6b7280">• AIMessage 객체 생성</text>
    <text x="1075" y="210" font-family="Arial, sans-serif" font-size="11" fill="#6b7280">• StrOutputParser().invoke()</text>
    <text x="1075" y="225" font-family="Arial, sans-serif" font-size="11" fill="#6b7280">• content 추출 확인</text>
    
    <!-- Type Verification -->
    <rect x="1060" y="270" width="260" height="70" rx="8" fill="#fff" stroke="#e5e7eb" stroke-width="1" filter="url(#shadow)"/>
    <text x="1075" y="295" font-family="Arial, sans-serif" font-size="14" font-weight="bold" fill="#1f2937">🔍 타입 검증</text>
    <text x="1075" y="315" font-family="Arial, sans-serif" font-size="11" fill="#6b7280">• type() 함수로 확인</text>
    <text x="1075" y="330" font-family="Arial, sans-serif" font-size="11" fill="#6b7280">• 파싱 결과 검증</text>
  </g>
  
  <!-- Chain Flow -->
  <g>
    <rect x="50" y="500" width="1290" height="200" rx="15" fill="#f3f4f6" stroke="#d1d5db" stroke-width="2"/>
    <text x="700" y="530" text-anchor="middle" font-family="Arial, sans-serif" font-size="20" font-weight="bold" fill="#374151">
      LangChain 처리 흐름 (Chain)
    </text>
    
    <!-- Chain Steps -->
    <g>
      <!-- Step 1 -->
      <rect x="80" y="550" width="200" height="80" rx="10" fill="#dbeafe" stroke="#3b82f6" stroke-width="2"/>
      <text x="180" y="575" text-anchor="middle" font-family="Arial, sans-serif" font-size="14" font-weight="bold" fill="#1e40af">1. 프롬프트 생성</text>
      <text x="180" y="595" text-anchor="middle" font-family="Arial, sans-serif" font-size="11" fill="#1e40af">Template + Variables</text>
      <text x="180" y="610" text-anchor="middle" font-family="Arial, sans-serif" font-size="11" fill="#1e40af">→ Formatted Messages</text>
      
      <!-- Arrow 1 -->
      <path d="M 290 590 L 340 590" fill="none" stroke="#6b7280" stroke-width="2" marker-end="url(#arrowhead)"/>
      
      <!-- Step 2 -->
      <rect x="350" y="550" width="200" height="80" rx="10" fill="#dcfce7" stroke="#10b981" stroke-width="2"/>
      <text x="450" y="575" text-anchor="middle" font-family="Arial, sans-serif" font-size="14" font-weight="bold" fill="#047857">2. 모델 실행</text>
      <text x="450" y="595" text-anchor="middle" font-family="Arial, sans-serif" font-size="11" fill="#047857">LLM/Chat Model</text>
      <text x="450" y="610" text-anchor="middle" font-family="Arial, sans-serif" font-size="11" fill="#047857">→ AI Response</text>
      
      <!-- Arrow 2 -->
      <path d="M 560 590 L 610 590" fill="none" stroke="#6b7280" stroke-width="2" marker-end="url(#arrowhead)"/>
      
      <!-- Step 3 -->
      <rect x="620" y="550" width="200" height="80" rx="10" fill="#fef3c7" stroke="#f59e0b" stroke-width="2"/>
      <text x="720" y="575" text-anchor="middle" font-family="Arial, sans-serif" font-size="14" font-weight="bold" fill="#92400e">3. 출력 파싱</text>
      <text x="720" y="595" text-anchor="middle" font-family="Arial, sans-serif" font-size="11" fill="#92400e">Output Parser</text>
      <text x="720" y="610" text-anchor="middle" font-family="Arial, sans-serif" font-size="11" fill="#92400e">→ Structured Data</text>
      
      <!-- Arrow 3 -->
      <path d="M 830 590 L 880 590" fill="none" stroke="#6b7280" stroke-width="2" marker-end="url(#arrowhead)"/>
      
      <!-- Step 4 -->
      <rect x="890" y="550" width="200" height="80" rx="10" fill="#fee2e2" stroke="#ef4444" stroke-width="2"/>
      <text x="990" y="575" text-anchor="middle" font-family="Arial, sans-serif" font-size="14" font-weight="bold" fill="#dc2626">4. 결과 활용</text>
      <text x="990" y="595" text-anchor="middle" font-family="Arial, sans-serif" font-size="11" fill="#dc2626">Application Logic</text>
      <text x="990" y="610" text-anchor="middle" font-family="Arial, sans-serif" font-size="11" fill="#dc2626">→ User Interface</text>
    </g>
  </g>
  
  <!-- Key Benefits -->
  <g>
    <rect x="50" y="730" width="1290" height="120" rx="15" fill="#f8fafc" stroke="#cbd5e1" stroke-width="1"/>
    <text x="700" y="760" text-anchor="middle" font-family="Arial, sans-serif" font-size="18" font-weight="bold" fill="#334155">
      LangChain의 핵심 장점
    </text>
    
    <g>
      <!-- Benefit 1 -->
      <rect x="80" y="780" width="250" height="50" rx="8" fill="#fff" stroke="#e2e8f0" stroke-width="1"/>
      <text x="205" y="800" text-anchor="middle" font-family="Arial, sans-serif" font-size="12" font-weight="bold" fill="#475569">🔧 모듈화</text>
      <text x="205" y="815" text-anchor="middle" font-family="Arial, sans-serif" font-size="10" fill="#64748b">각 구성요소를 독립적으로 개발/테스트</text>
      
      <!-- Benefit 2 -->
      <rect x="350" y="780" width="250" height="50" rx="8" fill="#fff" stroke="#e2e8f0" stroke-width="1"/>
      <text x="475" y="800" text-anchor="middle" font-family="Arial, sans-serif" font-size="12" font-weight="bold" fill="#475569">🔄 재사용성</text>
      <text x="475" y="815" text-anchor="middle" font-family="Arial, sans-serif" font-size="10" fill="#64748b">템플릿과 파서를 다양한 용도로 활용</text>
      
      <!-- Benefit 3 -->
      <rect x="620" y="780" width="250" height="50" rx="8" fill="#fff" stroke="#e2e8f0" stroke-width="1"/>
      <text x="745" y="800" text-anchor="middle" font-family="Arial, sans-serif" font-size="12" font-weight="bold" fill="#475569">🏗️ 확장성</text>
      <text x="745" y="815" text-anchor="middle" font-family="Arial, sans-serif" font-size="10" fill="#64748b">복잡한 AI 워크플로우 구성 가능</text>
      
      <!-- Benefit 4 -->
      <rect x="890" y="780" width="250" height="50" rx="8" fill="#fff" stroke="#e2e8f0" stroke-width="1"/>
      <text x="1015" y="800" text-anchor="middle" font-family="Arial, sans-serif" font-size="12" font-weight="bold" fill="#475569">🎯 표준화</text>
      <text x="1015" y="815" text-anchor="middle" font-family="Arial, sans-serif" font-size="10" fill="#64748b">일관된 인터페이스로 개발 효율성 증대</text>
    </g>
  </g>
</svg>